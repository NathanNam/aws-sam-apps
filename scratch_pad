#!/bin/bash


# Ensure the AWS CLI is authenticated
aws sts get-caller-identity

# package
## setup package pre-requisites
## create the package

export AWS_REGION=us-east-1
export APP=forwarder
make sam-package

# setup test infra
## source bucket
## destination bucket
## deploy

export SOURCE_BUCKET=${USER}-source-bucket
export DESTINATION_BUCKET=${USER}-destination-bucket
export ACCESS_POINT_NAME="${USER}-destination-access-point"
export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

# Create source bucket
aws s3api create-bucket --bucket ${SOURCE_BUCKET} --region ${AWS_REGION}
# Create destination bucket
aws s3api create-bucket --bucket ${DESTINATION_BUCKET} --region ${AWS_REGION}
# Attempt to delete the existing access point, and proceed regardless of success
aws s3control delete-access-point --account-id $AWS_ACCOUNT_ID --name $ACCESS_POINT_NAME --region $AWS_REGION || true

# Now, create the access point
export DATA_ACCESS_POINT_ARN=$(aws s3control create-access-point --account-id $AWS_ACCOUNT_ID --bucket $DESTINATION_BUCKET --name $ACCESS_POINT_NAME --region $AWS_REGION | jq -r '.AccessPointArn')

sam deploy \
  --template-file "$PWD/apps/$APP/.aws-sam/build/$AWS_REGION/packaged.yaml" \
  --stack-name "$USER-$APP" \
  --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
  --region $AWS_REGION \
  --parameter-overrides SourceBucketNames="$SOURCE_BUCKET" DestinationUri="s3://$DESTINATION_BUCKET/" DataAccessPointArn="$DATA_ACCESS_POINT_ARN" InstallConfig="false"

QUEUE_URL=$(aws sqs get-queue-url --queue-name "$USER-$APP" --region $AWS_REGION | jq -r '.QueueUrl')
QUEUE_ARN=$(aws sqs get-queue-attributes --queue-url $QUEUE_URL --attribute-names QueueArn --region $AWS_REGION | jq -r '.Attributes.QueueArn')

aws s3api put-bucket-notification-configuration --bucket $SOURCE_BUCKET --notification-configuration '{
    "QueueConfigurations": [
        {
            "QueueArn": "'$QUEUE_ARN'",
            "Events": ["s3:ObjectCreated:*"]
        }
    ]
}' --region $AWS_REGION

# Setup the S3 bucket to notify the Lambda function
export FUNCTION_NAME=$(aws cloudformation describe-stacks --stack-name "$USER-$APP" --query "Stacks[0].Outputs[?OutputKey=='Function'].OutputValue" --region $AWS_REGION --output text)
# Extracting function name from the ARN
export FUNCTION_NAME_SIMPLE=$(echo $FUNCTION_NAME | awk -F':' '{print $NF}')
export ROLE_ARN=$(aws lambda get-function-configuration --region ${AWS_REGION} --function-name ${FUNCTION_NAME} --query 'Role' --output text)
export ROLE_NAME=$(echo $ROLE_ARN | awk -F/ '{print $NF}')

# Allow Lambda function to CopyObject and PutObject to source and destination buckets
aws iam put-role-policy --role-name $ROLE_NAME --policy-name S3AccessPolicy --policy-document '{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": ["s3:CopyObject", "s3:PutObject"],
            "Resource": ["arn:aws:s3:::'$SOURCE_BUCKET'/*", "arn:aws:s3:::'$DESTINATION_BUCKET'/*"]
        }
    ]
}'

# Grant Lambda role permission on the source bucket
aws s3api put-bucket-policy --bucket $SOURCE_BUCKET --policy '{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": "'$ROLE_ARN'"
            },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::'$SOURCE_BUCKET'/*"
        }
    ]
}'

# Grant Lambda role permission on the destination bucket
aws s3api put-bucket-policy --bucket $DESTINATION_BUCKET --policy '{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": "'$ROLE_ARN'"
            },
            "Action": "s3:PutObject",
            "Resource": "arn:aws:s3:::'$DESTINATION_BUCKET'/*"
        }
    ]
}'

aws s3 cp apps/forwarder/events/event.json s3://${SOURCE_BUCKET}/

# # Setup the S3 bucket to notify the Lambda function
# export FUNCTION_NAME=$(aws cloudformation describe-stacks --stack-name "$USER-$APP" --query "Stacks[0].Outputs[?OutputKey=='Function'].OutputValue" --region $AWS_REGION --output text)
# # Extracting function name from the ARN
# export FUNCTION_NAME_SIMPLE=$(echo $FUNCTION_NAME | awk -F':' '{print $NF}')
# export ROLE_ARN=$(aws lambda get-function-configuration --region ${AWS_REGION} --function-name ${FUNCTION_NAME} --query 'Role' --output text)
# export ROLE_NAME=$(echo $ROLE_ARN | awk -F/ '{print $NF}')

# aws s3api put-bucket-notification-configuration \
#     --bucket ${SOURCE_BUCKET} \
#     --notification-configuration '{
#         "LambdaFunctionConfigurations": [
#             {
#                 "LambdaFunctionArn": "'${FUNCTION_NAME}'",
#                 "Events": ["s3:ObjectCreated:*"]
#             }
#         ]
#     }'

# aws lambda add-permission \
#     --function-name ${FUNCTION_NAME_SIMPLE} \
#     --action "lambda:InvokeFunction" \
#     --principal s3.amazonaws.com \
#     --source-arn arn:aws:s3:::${SOURCE_BUCKET} \
#     --statement-id s3invoke

# # Assuming you want to grant full S3 and CloudWatch Logs permissions for debugging (not recommended for production):
# aws iam put-role-policy --role-name ${ROLE_NAME} --policy-name S3CloudWatchFullAccess --policy-document '{
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Action": ["s3:*", "logs:*"],
#       "Resource": "*"
#     }
#   ]
# }'

# aws s3 cp test.json s3://${SOURCE_BUCKET}/



# Debugging

# Now use this simple name to fetch logs
export LOG_STREAM_NAME=$(aws logs describe-log-streams --region ${AWS_REGION} --log-group-name /aws/lambda/${FUNCTION_NAME_SIMPLE} --order-by LastEventTime --descending | jq -r '.logStreams[0].logStreamName')

aws logs get-log-events --region ${AWS_REGION} --log-group-name /aws/lambda/${FUNCTION_NAME_SIMPLE} --log-stream-name ${LOG_STREAM_NAME}

aws iam get-role --role-name ${ROLE_NAME}

aws iam list-attached-role-policies --role-name ${ROLE_NAME}
aws iam list-role-policies --role-name ${ROLE_NAME}

aws s3api get-bucket-notification-configuration --bucket ${SOURCE_BUCKET}

export DLQ_ARN=$(aws lambda get-function-configuration --region ${AWS_REGION} --function-name ${FUNCTION_NAME} --query 'DeadLetterConfig.TargetArn' --output text)

aws lambda get-policy --region ${AWS_REGION} --function-name ${FUNCTION_NAME_SIMPLE} --query 'Policy' --output text | jq

aws lambda invoke --region ${AWS_REGION} --function-name ${FUNCTION_NAME} --payload '{ "some": "sample-payload" }' output.txt


# Cleaning Up

aws events remove-targets --rule ${EVENT_RULE_NAME} --ids "1"
aws events delete-rule --name ${EVENT_RULE_NAME}

aws lambda remove-permission --region ${AWS_REGION} --function-name ${FUNCTION_NAME} --statement-id "${EVENT_RULE_NAME}-Event"

sam delete --stack-name "$USER-$APP" --region $AWS_REGION

aws s3control delete-access-point --region $AWS_REGION --account-id $AWS_ACCOUNT_ID --name $ACCESS_POINT_NAME

aws s3 rm s3://${SOURCE_BUCKET} --recursive
aws s3 rm s3://${DESTINATION_BUCKET} --recursive
aws s3api delete-bucket --bucket ${SOURCE_BUCKET}
aws s3api delete-bucket --bucket ${DESTINATION_BUCKET}

